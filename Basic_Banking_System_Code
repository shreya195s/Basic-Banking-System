package model;

public class Account {
    private int accNumber;
    private String name;
    private String accType;
    private double balance;

    public int getAccNumber() {
        return accNumber;
    }

    public void setAccNumber(int accNumber) {
        this.accNumber = accNumber;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAccType() {
        return accType;
    }

    public void setAccType(String accType) {
        this.accType = accType;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }
}


package dao;

import utils.DBConnection;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class AccountDAO {

    public void deposit(int accNumber, double amount) throws Exception {
        try (Connection con = DBConnection.getConnection();
             PreparedStatement ps = con.prepareStatement("UPDATE accounts SET balance = balance + ? WHERE acc_number = ?")) {
            ps.setDouble(1, amount);
            ps.setInt(2, accNumber);
            int rows = ps.executeUpdate();
            if (rows == 0) throw new Exception("Account not found.");
        }
    }

    public void withdraw(int accNumber, double amount) throws Exception {
        try (Connection con = DBConnection.getConnection();
             PreparedStatement ps = con.prepareStatement("UPDATE accounts SET balance = balance - ? WHERE acc_number = ? AND balance >= ?")) {
            ps.setDouble(1, amount);
            ps.setInt(2, accNumber);
            ps.setDouble(3, amount);
            int rows = ps.executeUpdate();
            if (rows == 0) throw new Exception("Insufficient balance or account not found.");
        }
    }

    public double getBalance(int accNumber) throws Exception {
        try (Connection con = DBConnection.getConnection();
             PreparedStatement ps = con.prepareStatement("SELECT balance FROM accounts WHERE acc_number = ?")) {
            ps.setInt(1, accNumber);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getDouble("balance");
                } else {
                    throw new Exception("Account not found.");
                }
            }
        }
    }
}


package ui;

import dao.AccountDAO;

import javax.swing.*;

public class BankingAppUI {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Basic Banking System");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(null);

        JLabel label = new JLabel("Account Number:");
        label.setBounds(30, 30, 150, 20);
        JTextField accField = new JTextField();
        accField.setBounds(180, 30, 150, 20);

        JLabel amountLabel = new JLabel("Amount:");
        amountLabel.setBounds(30, 70, 150, 20);
        JTextField amountField = new JTextField();
        amountField.setBounds(180, 70, 150, 20);

        JButton depositBtn = new JButton("Deposit");
        depositBtn.setBounds(30, 110, 100, 30);
        JButton withdrawBtn = new JButton("Withdraw");
        withdrawBtn.setBounds(150, 110, 100, 30);
        JButton balanceBtn = new JButton("Balance");
        balanceBtn.setBounds(270, 110, 100, 30);

        JLabel resultLabel = new JLabel();
        resultLabel.setBounds(30, 170, 340, 30);

        AccountDAO dao = new AccountDAO();

        depositBtn.addActionListener(e -> {
            try {
                int accNo = Integer.parseInt(accField.getText());
                double amount = Double.parseDouble(amountField.getText());
                if (amount <= 0) throw new NumberFormatException();
                dao.deposit(accNo, amount);
                resultLabel.setText("Amount deposited successfully");
            } catch (NumberFormatException ex) {
                resultLabel.setText("Invalid account or amount input.");
            } catch (Exception ex) {
                resultLabel.setText("Error: " + ex.getMessage());
            }
        });

        withdrawBtn.addActionListener(e -> {
            try {
                int accNo = Integer.parseInt(accField.getText());
                double amount = Double.parseDouble(amountField.getText());
                if (amount <= 0) throw new NumberFormatException();
                dao.withdraw(accNo, amount);
                resultLabel.setText("Amount withdrawn successfully");
            } catch (NumberFormatException ex) {
                resultLabel.setText("Invalid account or amount input.");
            } catch (Exception ex) {
                resultLabel.setText("Error: " + ex.getMessage());
            }
        });

        balanceBtn.addActionListener(e -> {
            try {
                int accNo = Integer.parseInt(accField.getText());
                double bal = dao.getBalance(accNo);
                resultLabel.setText("Current balance: " + bal);
            } catch (NumberFormatException ex) {
                resultLabel.setText("Invalid account number.");
            } catch (Exception ex) {
                resultLabel.setText("Error: " + ex.getMessage());
            }
        });

        frame.add(label);
        frame.add(accField);
        frame.add(amountLabel);
        frame.add(amountField);
        frame.add(depositBtn);
        frame.add(withdrawBtn);
        frame.add(balanceBtn);
        frame.add(resultLabel);
        frame.setVisible(true);
    }
}


package utils;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection {
    public static Connection getConnection() throws Exception {
        String url = "jdbc:mysql://localhost:3306/your_database";
        String user = "your_username";
        String password = "your_password";
        Class.forName("com.mysql.cj.jdbc.Driver");
        return DriverManager.getConnection(url, user, password);
    }
}
