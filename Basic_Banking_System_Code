package model;

public class Account {
    private int accNumber;
    private String name;
    private String accType;
    private double balance;

    // Getters and setters
}
package dao;

import model.Account;
import utils.DBConnection;

import java.sql.*;

public class AccountDAO {
    public void deposit(int accNumber, double amount) throws Exception {
        Connection con = DBConnection.getConnection();
        PreparedStatement ps = con.prepareStatement("UPDATE accounts SET balance = balance + ? WHERE acc_number = ?");
        ps.setDouble(1, amount);
        ps.setInt(2, accNumber);
        ps.executeUpdate();
    }

    public void withdraw(int accNumber, double amount) throws Exception {
        Connection con = DBConnection.getConnection();
        PreparedStatement ps = con.prepareStatement("UPDATE accounts SET balance = balance - ? WHERE acc_number = ? AND balance >= ?");
        ps.setDouble(1, amount);
        ps.setInt(2, accNumber);
        ps.setDouble(3, amount);
        ps.executeUpdate();
    }

    public double getBalance(int accNumber) throws Exception {
        Connection con = DBConnection.getConnection();
        PreparedStatement ps = con.prepareStatement("SELECT balance FROM accounts WHERE acc_number = ?");
        ps.setInt(1, accNumber);
        ResultSet rs = ps.executeQuery();
        return rs.next() ? rs.getDouble("balance") : 0;
    }
    
  }
  package ui;


import dao.AccountDAO;

import javax.swing.*;

public class BankingAppUI {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Basic Banking System");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(null);

        JLabel label = new JLabel("Account Number:");
        label.setBounds(30, 30, 150, 20);
        JTextField accField = new JTextField();
        accField.setBounds(180, 30, 150, 20);

        JButton depositBtn = new JButton("Deposit");
        depositBtn.setBounds(30, 80, 100, 30);
        JButton withdrawBtn = new JButton("Withdraw");
        withdrawBtn.setBounds(150, 80, 100, 30);
        JButton balanceBtn = new JButton("Balance");
        balanceBtn.setBounds(270, 80, 100, 30);

        JTextField amountField = new JTextField();
        amountField.setBounds(180, 120, 150, 20);
        JLabel resultLabel = new JLabel();
        resultLabel.setBounds(30, 180, 300, 30);

        AccountDAO dao = new AccountDAO();

        depositBtn.addActionListener(e -> {
            try {
                dao.deposit(Integer.parseInt(accField.getText()), Double.parseDouble(amountField.getText()));
                resultLabel.setText("Amount deposited successfully");
            } catch (Exception ex) {
                resultLabel.setText("Error: " + ex.getMessage());
            }
        });

        withdrawBtn.addActionListener(e -> {
            try {
                dao.withdraw(Integer.parseInt(accField.getText()), Double.parseDouble(amountField.getText()));
                resultLabel.setText("Amount withdrawn successfully");
            } catch (Exception ex) {
                resultLabel.setText("Error: " + ex.getMessage());
            }
        });

        balanceBtn.addActionListener(e -> {
            try {
                double bal = dao.getBalance(Integer.parseInt(accField.getText()));
                resultLabel.setText("Current balance: " + bal);
            } catch (Exception ex) {
                resultLabel.setText("Error: " + ex.getMessage());
            }
        });

        frame.add(label);
        frame.add(accField);
        frame.add(amountField);
        frame.add(depositBtn);
        frame.add(withdrawBtn);
        frame.add(balanceBtn);
        frame.add(resultLabel);
        frame.setVisible(true);
    }
}
